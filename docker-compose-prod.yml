networks:
  app_network:
    name: ${COMPOSE_PROJECT_NAME}
    driver: bridge

services:

  nginx:
    build:
      context: .
      dockerfile: nginx.dockerfile
      args:
        - NGINX_VERSION=${NGINX_VERSION}
        - APP_DOMAIN=${APP_DOMAIN}
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    depends_on:
      - php
      - mysql
      - redis
      - kafka
      - zookeeper
      - meilisearch
      - phpmyadmin
    ports:
      - ${HTTP_ON_HOST}:80
      - ${HTTPS_ON_HOST}:443
    volumes:
      - ${PATH_TO_CODE}:/var/www/html
    networks:
      - app_network

  php:
    #user: 1000:1000
    #platform: linux/amd64
    build:
      context: .
      dockerfile: php.dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_php_${PHP_VERSION}
    volumes:
      - ${PATH_TO_CODE}:/var/www/html
    networks:
      - app_network

  mysql:
    #image: mariadb:${MARIADB_VERSION}
    image: arm64v8/mysql:${MYSQL_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_mysql
    ports:
      - ${MYSQL_ON_HOST}:3306
    volumes:
      - ./database/data/${COMPOSE_PROJECT_NAME}_data:/var/lib/mysql
    networks:
      - app_network
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  composer:
    #user: 1000:1000
    #platform: linux/amd64
    build:
      context: .
      dockerfile: php.dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_composer_${PHP_VERSION}
    volumes:
      - ${PATH_TO_CODE}:/var/www/html
    working_dir: /var/www/html
    entrypoint: ["php", "/bin/composer.phar"]
    networks:
      - app_network

  artisan:
    #user: 1000:1000
    #platform: linux/amd64
    build:
      context: .
      dockerfile: php.dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_artisan_${PHP_VERSION}
    volumes:
      - ${PATH_TO_CODE}:/var/www/html
    working_dir: /var/www/html
    entrypoint: ["php", "artisan"]
    networks:
      - app_network

  npm:
    image: node:${NODE_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_npm
    volumes:
      - ${PATH_TO_CODE}:/var/www/html
    working_dir: /var/www/html
    entrypoint: ["npm"]
    networks:
      - app_network

  phpunit:
    #user: 1000:1000
    #platform: linux/amd64
    build:
      context: .
      dockerfile: php.dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_phpunit_${PHP_VERSION}
    volumes:
      - ${PATH_TO_CODE}:/var/www/html
    working_dir: /var/www/html
    entrypoint: ["/var/www/html/vendor/bin/phpunit"]
    networks:
      - app_network

  redis:
    image: redis:${REDIS_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    ports:
      - ${REDIS_ON_HOST}:6379
    networks:
      - app_network

  horizon:
    #user: 1000:1000
    #platform: linux/amd64
    build:
      context: .
      dockerfile: php.dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_horizon_${PHP_VERSION}
    volumes:
      - ${PATH_TO_CODE}:/var/www/html
    working_dir: /var/www/html
    entrypoint: ["php", "artisan", "horizon"]
    networks:
      - app_network

  cron:
    #user: 1000:1000
    #platform: linux/amd64
    build:
      context: .
      dockerfile: php.dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_cron_${PHP_VERSION}
    volumes:
      - ${PATH_TO_CODE}:/var/www/html
    working_dir: /var/www/html
    entrypoint: ["crond", "-f"]
    networks:
      - app_network

  phpmyadmin:
    #user: 1000:1000
    platform: linux/amd64
    image: phpmyadmin/phpmyadmin:latest
    container_name: ${COMPOSE_PROJECT_NAME}_phpmyadmin
    env_file:
      - .env
    environment:
      PMA_HOST: ${PMA_HOST} # Change this to your MySQL container name
    networks:
      - app_network

  meilisearch:
    # Uncomment and adjust user if needed
    # user: 1000:1000
    # Uncomment and adjust platform if needed
    # platform: linux/amd64
    image: getmeili/meilisearch:latest
    container_name: ${COMPOSE_PROJECT_NAME}_meilisearch
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - MEILI_NO_ANALYTICS=${MEILI_NO_ANALYTICS}
      - MEILI_ENV=${MEILI_ENV}
      - MEILI_LOG_LEVEL=${MEILI_LOG_LEVEL}
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./meilisearch/data/${COMPOSE_PROJECT_NAME}_data:/meili_data
    networks:
      - app_network
    ports:
      - ${MEILISEARCH_ON_HOST}:7700

  zookeeper:
    #user: 1000:1000
    #platform: linux/amd64
    image: confluentinc/cp-zookeeper:latest
    env_file:
      - .env
    container_name: ${COMPOSE_PROJECT_NAME}_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - ${ZOOKEEPER_TICK_TIME}:2181
    networks:
      - app_network


  kafka:
    #user: 1000:1000
    #platform: linux/amd64
    image: confluentinc/cp-kafka:latest
    env_file:
      - .env
    container_name: ${COMPOSE_PROJECT_NAME}_kafka
    networks:
      - app_network
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_ADVERTISED_LISTENERS_PORT}:9092
      - ${KAFKA_ADVERTISED_LISTENERS_PORT_TWO}:29092
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
    volumes:
      - ./broker/data:/var/lib/kafka/data
#!/usr/bin/env bash

# Define color codes
BOLD='\033[1m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
RESET='\033[0m'

# Function to echo text in bold
function echo_bold {
    echo -e "${BOLD}$1${RESET}"
}

# Function to echo text in yellow
function echo_yellow {
    echo -e "${YELLOW}$1${RESET}"
}

# Function to echo text in green
function echo_green {
    echo -e "${GREEN}$1${RESET}"
}

# Function to echo text in blue
function echo_blue {
    echo -e "${BLUE}$1${RESET}"
}

# Function to echo text in blue
function echo_red {
    echo -e "${RED}$1${RESET}"
}

# Function to echo out a command line with aligned descriptions
function echo_command {
    local command="$1"
    local indent="  "
    if [ ! -z "$2" ]; then
      local description="$2"
      local num_command_chars=${#command}
      local total_command_length=25
      local num_spaces=`expr $total_command_length - $num_command_chars`
      local gap=`printf '%*s' "$num_spaces" | tr ' ' " "`

      echo -e "${indent}${GREEN}$command${RESET}${gap}${description}"
    else
      echo -e "${indent}${GREEN}$command${RESET}"
    fi
}

# Function to echo out an example
function echo_example {
    local example="$1"
    local indent="  --> "
    if [ ! -z "$2" ]; then
      local description="$2"
      local num_command_chars=${#example}
      local gap="   "

      echo -e "${indent}${BLUE}$example${RESET}${gap}${description}"
    else
      echo -e "${indent}${BLUE}$example${RESET}"
    fi
}

# Function that prints the available commands...
function display_help {
    echo -e "${BOLD}Laravel Starter Kit${RESET}"
    echo
    echo_yellow "Usage:"
    echo "  kit [prod] COMMAND [options] [arguments]"
    echo
    echo "examples:"
    echo_example "kit build" "Build the application"
    echo_example "kit prod build" "Build the production version of the application"
    echo
    echo_yellow "Commands:"
    echo_command "kit create" "Creates a new Laravel application"
    echo_command "kit build" "Build the application"
    echo_command "kit start" "Start the application"
    echo_command "kit open" "Opens browser tab to application"
    echo_command "kit migrate" "Runs database migrations"
    echo_command "kit stop" "Stop the application"
    echo_command "kit restart" "Stop and start the application"
    echo_command "kit destroy" "Stop the application and delete all images"
    echo_command "kit horizon start" "Starts horizon"
    echo_command "kit horizon stop" "Stops horizon"
    echo_command "kit horizon destroy" "Stops horizon and delete associated images"
    echo_command "kit cron start" "Starts horizon"
    echo_command "kit cron stop" "Stops horizon"
    echo_command "kit cron destroy" "Stops horizon and delete associated images"
    echo_command "kit ssh <SERVICE>" "Opens shell access to container"
    echo_command "kit ps" "Display the status of all containers"
    echo
    echo_yellow "Artisan Commands:"
    echo_command "kit artisan ..." "Run an Artisan command"
    echo_example "kit artisan queue:work"
    echo
    echo_yellow "Composer Commands:"
    echo_command "kit composer ..." "Run a Composer command"
    echo_example "kit composer require laravel/sanctum"
    echo
    echo_yellow "NPM Commands:"
    echo_command "kit npm ..." "Run a npm command"
    echo_command "kit npx" "Run a npx command"
    echo
    exit 1
}

# Display the help menu if no commands supplied or if any standard help flags exist
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Handle differences between local and production environments
if [ "$1" == "prod" ]; then
    shift 1
    IS_PROD=true
    COMPOSE_FILE="docker-compose-prod.yml"
    ENV_FILE=".env.prod"
    LARAVEL_ENV_FILE="./laravel/.env.prod"
else
    IS_PROD=false
    COMPOSE_FILE="docker-compose.yml"
    ENV_FILE=".env"
    LARAVEL_ENV_FILE="./laravel/.env"
fi

# Make variables in the ENV_FILE accessible to the script
source ./${ENV_FILE}

# The following are functions that are used in multiple places
function start_application {
      docker exec -it mysql bash -l

      if [ ! -d "${PATH_TO_CODE}/vendor" ]; then
          echo -e "Running composer install (missing directory: ${YELLOW}${PATH_TO_CODE}/vendor)${RESET}"
          docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} run --rm composer install
          docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} run --rm artisan key:generate
          docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} run --rm artisan migrate --force
      fi
}
function open_browser_tab {
      URL="https://${APP_DOMAIN}:${HTTPS_ON_HOST}"
      open "${URL}"
}

# Create new application
if [ "$1" == "create" ]; then

    if [ ! -z "$2" ]; then
        if [ "$2" == "force" ] || [ "$2" == "-f" ] || [ "$2" == "-force" ] || [ "$2" == "--force" ]; then
            echo_red "Deleting directory: ${PATH_TO_CODE}"
            rm -rf ${PATH_TO_CODE}
        fi
    fi

    if [ ! -d "${PATH_TO_CODE}" ]; then
        echo_yellow "Creating directory ${PATH_TO_CODE}"
        mkdir -p ${PATH_TO_CODE}

        if [ -z "${CODE_REPO_URL}" ]; then
            CODE_REPO_URL="https://github.com/laravel/laravel.git"
        fi

        echo_yellow "Cloning Laravel Project From: ${CODE_REPO_URL}"
        git clone ${CODE_REPO_URL} ${PATH_TO_CODE}

        if [ ! -f "${PATH_TO_CODE}/.env" ]; then
            if [ -f "${LARAVEL_ENV_FILE}" ]; then
                echo_yellow "Copying .env file. Source: ${LARAVEL_ENV_FILE}"
                cp ${LARAVEL_ENV_FILE} ${PATH_TO_CODE}/.env
            else
                if [ -f "${PATH_TO_CODE}/.env.example" ]; then
                    echo_yellow "Creating the .env file from .env.example"
                    cp ${PATH_TO_CODE}/.env.example ${PATH_TO_CODE}/.env
                    sed -i .bak "s|APP_NAME=Laravel|APP_NAME=${COMPOSE_PROJECT_NAME}|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|APP_URL=.*|APP_URL=https://${APP_DOMAIN}:${HTTPS_ON_HOST}|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|DB_CONNECTION=.*|DB_CONNECTION=mysql|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|.*DB_HOST=.*|DB_HOST=mysql|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|.*DB_HOST_READ=.*|DB_HOST_READ=mysql|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|.*DB_HOST_WRITE=.*|DB_HOST_WRITE=mysql|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|.*DB_PORT=.*|DB_PORT=3306|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|.*DB_DATABASE=.*|DB_DATABASE=${MYSQL_DATABASE}|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|.*DB_USERNAME=.*|DB_USERNAME=${MYSQL_USER}|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|.*DB_PASSWORD=.*|DB_PASSWORD=${MYSQL_PASSWORD}|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|SESSION_DRIVER=.*|SESSION_DRIVER=redis|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|QUEUE_CONNECTION=.*|QUEUE_CONNECTION=redis|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|CACHE_STORE=.*|CACHE_STORE=redis|" ${PATH_TO_CODE}/.env
                    sed -i .bak "s|REDIS_HOST=.*|REDIS_HOST=redis|" ${PATH_TO_CODE}/.env
                    rm ${PATH_TO_CODE}/.env.bak
                fi
            fi
        else
            echo_yellow "Found existing .env file"
        fi

        echo_yellow "Building the Docker images"
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} build --no-cache nginx

        echo_yellow "Starting the application"
        start_application

        if [ -f "/etc/hosts" ]; then
            echo_yellow "Ensuring domain exists in host file"
            matches_in_hosts="$(grep -n ${APP_DOMAIN} /etc/hosts | cut -f1 -d:)"
            if [ ! -z "${matches_in_hosts}" ]; then
                echo_yellow "Domain exists already"
            else
                sudo -- sh -c -e "echo '127.0.0.1       ${APP_DOMAIN}' >> /etc/hosts"
                echo_yellow "Domain added"
            fi
        else
            echo_yellow "Host file not found. You may need to add the domain manually."
        fi


        echo_yellow "Opening browser tab"
        open_browser_tab

    else
        echo_yellow "Code directory already exists at: ${PATH_TO_CODE}"
    fi

# Build the application
elif [ "$1" == "build" ]; then
    shift 1
    if [ -z "$1" ]; then
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} build nginx
    else
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} build "$@"
    fi

# Start the application
elif [ "$1" == "start" ]; then
    start_application

# Stop the application
elif [ "$1" == "stop" ]; then
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} down

# Restart the application
elif [ "$1" == "restart" ]; then
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} down
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} up -d nginx

# Destroy the application
elif [ "$1" == "destroy" ]; then
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} down --rmi all -v --remove-orphans

# List running processes
elif [ "$1" == "ps" ]; then
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} ps

# SSH into container
elif [ "$1" == "ssh" ]; then
    shift 1
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE}  exec -it "$@" /bin/sh

# Start / stop horizon
elif [ "$1" == "horizon" ]; then
    if [ ! -d "${PATH_TO_CODE}/vendor/laravel/horizon" ]; then
        echo_yellow "Horizon not found...installing now"
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} run --rm composer require laravel/horizon
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} run --rm artisan horizon:install
    fi
    if [ "$2" == "start" ]; then
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} up -d horizon
        URL="https://${APP_DOMAIN}:${HTTPS_ON_HOST}/horizon"
        open "${URL}"
    elif [ "$2" == "stop" ]; then
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} down horizon
    elif [ "$2" == "destroy" ]; then
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} down --rmi all -v horizon
    else
        echo "Unknown command!"
    fi

# Start / stop cron service
elif [ "$1" == "cron" ]; then
    if [ "$2" == "start" ]; then
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} up -d cron
    elif [ "$2" == "stop" ]; then
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} down cron
    elif [ "$2" == "destroy" ]; then
        docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} down --rmi all -v cron
    else
        echo "Unknown command!"
    fi

# Run composer commands
elif [ "$1" == "composer" ]; then
    shift 1
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} run --rm composer "$@"

# Run npm commands
elif [ "$1" == "npm" ]; then
    shift 1
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} run --rm npm "$@"

# Run artisan commands
elif [ "$1" == "artisan" ]; then
    shift 1
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} run --rm artisan "$@"

# Run shortcut commands
elif [ "$1" == "migrate" ]; then
    docker compose -f ${COMPOSE_FILE} --env-file ${ENV_FILE} run --rm artisan migrate

elif [ "$1" == "open" ]; then
    open_browser_tab

else
    echo "Unknown command!"
fi
